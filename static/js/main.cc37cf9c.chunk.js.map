{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Searchbox.js","components/Scroll.js","containers/App.js","Actions.js","Constants.js","serviceWorker.js","Reducers.js","index.js"],"names":["Card","id","name","email","className","alt","src","Cardlist","people","map","user","i","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","App","this","onRequestPeople","searchField","onSearchChange","isPending","filteredPeople","filter","toLowerCase","includes","Component","connect","state","searchPeople","requestPeople","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStatePeople","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cc37cf9c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    // const {id, name, email} = props;\r\n    return(\r\n       \r\n        <div className=\"bg-lightest-blue dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            {/* <img alt =\"robots\" src = {`https://robohash.org/${id}?set=set3 `} /> */}\r\n            <img className=\"profilePics\" alt =\"people\" src = {`https://i.pravatar.cc/150?img=${id}`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n               \r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    \r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst Cardlist = ({ people }) => {\r\n  return (\r\n    <div>\r\n      {people.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={people[i].id}\r\n            id={people[i].id}\r\n            name={people[i].name}\r\n            email={people[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cardlist;\r\n","import React from \"react\";\r\n\r\nconst Searchbox = ({ searchfield, searchChange}) => {\r\n  return (\r\n    <div className = \"pa2\">\r\n      <input className=\"pa23 ba b--green bg-lightest-blue\"\r\n        type=\"search\" \r\n        placeholder=\"Search here...\" \r\n        onChange = {searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Searchbox;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div className=\"bt bb b--white\" style={{overflowY: 'auto',  height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Cardlist from '../components/Cardlist';\r\nimport Searchbox from '../components/Searchbox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\n\r\nimport { setSearchField, requestPeople } from '../Actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchPeople.searchField,\r\n        people: state.requestPeople.people,\r\n        isPending: state.requestPeople.isPending,\r\n        error: state.requestPeople.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestPeople: () => dispatch(requestPeople())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    // constructor(){\r\n    //     super()\r\n    //     this.state = {\r\n    //         people: [],\r\n    //         // searchfield: ''\r\n    //     }\r\n    // }\r\n\r\n    componentDidMount(){\r\n        this.props.onRequestPeople();\r\n        // fetch('https://jsonplaceholder.typicode.com/users')\r\n        //     .then(response => response.json())\r\n        //     .then(users => this.setState({ people: users}));\r\n    }\r\n\r\n    // onSearchChange = (event) => {\r\n    //     this.setState({ searchfield: event.target.value })      \r\n    // }\r\n\r\n    render() {\r\n        // const { people } = this.state;\r\n        const {searchField, onSearchChange, people, isPending } = this.props;\r\n\r\n        const filteredPeople = people.filter(people => {\r\n            return people.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n\r\n        //  return !people.length ?\r\n        return isPending ?\r\n            <h1>Loading</h1> :        //if\r\n            (                         //else\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1\">Search Profiles</h1>\r\n                    <Searchbox searchChange = {onSearchChange} />\r\n                    <Scroll>\r\n                        <Cardlist people={filteredPeople}/>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n\r\n        \r\n\r\n       \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_PEOPLE_PENDING,\r\n    REQUEST_PEOPLE_SUCCESS,\r\n    REQUEST_PEOPLE_FAILED \r\n} from './Constants.js';\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: 'CHANGE_SEARCH_FIELD',\r\n    payload: text\r\n})\r\n\r\nexport const requestPeople = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_PEOPLE_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(data => dispatch({ type: REQUEST_PEOPLE_SUCCESS, payload: data }))\r\n            .catch(error => dispatch({ type: REQUEST_PEOPLE_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_PEOPLE_PENDING = 'REQUEST_PEOPLE_PENDING';\r\nexport const REQUEST_PEOPLE_SUCCESS = 'REQUEST_PEOPLE_SUCCESS';\r\nexport const REQUEST_PEOPLE_FAILED = 'REQUEST_PEOPLE_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_PEOPLE_PENDING,\r\n    REQUEST_PEOPLE_SUCCESS,\r\n    REQUEST_PEOPLE_FAILED \r\n} from './Constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchPeople = (state=initialStateSearch, action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStatePeople = {\r\n    isPending: false,\r\n    people: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestPeople = (state=initialStatePeople, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_PEOPLE_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_PEOPLE_SUCCESS:\r\n            return Object.assign({}, state, { people: action.payload, isPending: false })\r\n        case REQUEST_PEOPLE_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport {createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport { searchPeople, requestPeople } from './Reducers';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchPeople, requestPeople})\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render(\r\n            <Provider store={store} >\r\n                <App /> \r\n            </Provider> , document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}